#include <iostream>
#include <fstream>

using namespace std;

bool palindrom (string s)
{
    int dl=s.size();
    for (int i=0;i<dl/2;i++)
        if(s[i]!=s[dl-i-1]) return false;
    return true;
}

bool zaczyna(string linia, string H)
{
	if(linia.find(H)==0)
		return true;
	else
		return false;
}

string linia;
string H="H";
int ile,rozmiar,p,np,w;


int main()
{
    fstream dane;
    fstream palindromy;

    dane.open("dane.txt", ios::in);
    palindromy.open("palindromy.txt", ios::out);


    cout<<"Wybierz opcje:"<<endl;
    cout<<"1. - Wszystkie palindromy"<<endl;
    cout<<"2. - Palindromy zaczynajace sie na litere 'H'"<<endl;
    cout<<"3. - Palindromy w ktorych znak 'A' pojawia sie conajmniej 3 razy"<<endl;

    cin>>w;
switch(w)
{

case 1:
    {
        while(dane.good())
            {
                dane>>linia;
                if(palindrom(linia)!=0)
                {
                    string str(linia);
                    rozmiar=str.size();
                    if(rozmiar%2==0) p++;
                    else np++;

                    palindromy<<linia<<endl;
                    ile++;
                }
            }
    }
break;
case 2:
    {
     while(dane.good())
            {
                dane>>linia;
                if(palindrom(linia)!=0 && zaczyna(linia,H) !=0)
                {
                    string str(linia);
                    rozmiar=str.size();
                    if(rozmiar%2==0) p++;
                    else np++;
                    palindromy<<linia<<endl;
                    ile++;
                }
            }
    }
break;
case 3:
    {
      while(dane.good())
            {
                dane>>linia;

                string s = linia;
                char znak='A';
                int A=0;
                for (int i=0;(i=s.find(znak,i))!=string::npos;i++) A++;
                if(palindrom(linia)!=0 && A > 2)
                {
                    string str(linia);
                    rozmiar=str.size();
                    if(rozmiar%2==0) p++;
                    else np++;
                    palindromy<<linia<<endl;
                    ile++;

                }
            }
    }
break;
default: cout<<"blad"<<endl;

}


    palindromy<<endl<<"liczba palindromow: "<<ile<<endl<<"liczba parzystych palindromow: "<<p<<endl<<"liczba nieparzystych palindromow: "<<np<<endl;

    dane.close();
    palindromy.close();

    return 0;

}
